"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "Get the current user"
    me: User @auth

    "Find an auditorium by an identifying attribute."
    auditorium(
        "Search by primary key."
        id: ID @eq
    ): Auditorium @find

    "List multiple auditoriums."
    auditoria(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [Auditorium!]! @paginate(defaultCount: 10)

    "Find a theater by an identifying attribute."
    theater(
        "Search by primary key."
        id: ID @eq
    ): Theater @find

    "List multiple theaters."
    theaters(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [Theater!]! @paginate(defaultCount: 10)

    "Find a theater chain by an identifying attribute."
    theaterChain(
        "Search by primary key."
        id: ID @eq
    ): TheaterChain @find

    "List multiple theater chains."
    theaterChains(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [TheaterChain!]! @paginate(defaultCount: 10)

    "Find a user-rating for auditorium by an identifying attribute."
    rating(
        "Search by primary key."
        id: ID @eq
    ): Rating @find

    "List multiple user-rating for auditorium."
    ratings(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [Rating!]! @paginate(defaultCount: 10)
}

type Mutation {
    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!

    "Log out from the current session, showing the user one last time."
    logout: User @guard
}

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    ratings: [Rating!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

"A theater chain with theaters."
type TheaterChain {
    id: ID!
    name: String!
    theaters: [Theater!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

"A theater from a chain."
type Theater {
    id: ID!
    name: String!
    theaterChain: TheaterChain! @belongsTo
    auditoria: [Auditorium!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

"A theater's auditorium room."
type Auditorium {
    id: ID!
    name: String!
    theater: Theater! @belongsTo
    ratings: [Rating!]! @hasMany
    image_rating: Float @aggregate(relation: "ratings", column: "image_rating", function: AVG)
    audio_rating: Float @aggregate(relation: "ratings", column: "audio_rating", function: AVG)
    comfort_rating: Float @aggregate(relation: "ratings", column: "comfort_rating", function: AVG)
    bomboniere_rating: Float @aggregate(relation: "ratings", column: "bomboniere_rating", function: AVG)
    experience_rating: Float @aggregate(relation: "ratings", column: "experience_rating", function: AVG)
    ratings_count: Int! @count(relation: "ratings")
    created_at: DateTime!
    updated_at: DateTime!
}

"A user rating for an auditorium."
type Rating {
    id: ID!
    user: User! @belongsTo
    auditorium: Auditorium! @belongsTo
    image_rating: Int
    audio_rating: Int
    comfort_rating: Int
    bomboniere_rating: Int
    experience_rating: Int
    review: String
    visited_at: DateTime!
    movie_watched: String!
    seat: String
    seat_rating: Int
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}
