"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "List multiple states."
    states(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        uf: String @where(operator: "like")
    ): [State!]! @paginate(defaultCount: 10)

    "List multiple cities."
    cities(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
        slug: String @where(operator: "like")
    ): [City!]! @paginate(defaultCount: 10)

    mostPopularCity: City! @first(scopes: ["orderByPopularity"]) # @cache(maxAge: 604800)

    "Get the current user"
    me: User @auth

    "Find an auditorium by an identifying attribute."
    auditorium(
        "Search by primary key."
        id: ID @eq
        slug: String @where(operator: "like")
    ): Auditorium @find

    "List multiple auditoriums."
    auditoriums(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
        slug: String @where(operator: "like")
    ): [Auditorium!]! @paginate(defaultCount: 10)

    "Find a theater by an identifying attribute."
    theater(
        "Search by primary key."
        id: ID @eq
        slug: String @where(operator: "like")
    ): Theater @find

    "List multiple theaters."
    theaters(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
        city_id: ID @where
    ): [Theater!]! @paginate(defaultCount: 10)

    "Find a theater chain by an identifying attribute."
    theaterChain(
        "Search by primary key."
        id: ID @eq
    ): TheaterChain @find

    "List multiple theater chains."
    theaterChains(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [TheaterChain!]! @paginate(defaultCount: 10)

    "Find a user-rating for auditorium by an identifying attribute."
    rating(
        "Search by primary key."
        id: ID @eq
    ): Rating @find

    "List multiple user-rating for auditorium."
    ratings(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [Rating!]! @paginate(defaultCount: 10)

    searchMovies(query: String!): [Movie]
}

type Mutation {
    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!

    "Log out from the current session, showing the user one last time."
    logout: User

    "Register a new user"
    createUser(
        name: String! @rules(apply: ["required"])
        email: String! @rules(apply: ["required", "email", "unique:users"])
        password: String! @rules(apply: ["required", "min:8"])
    ): User

    "Creates a new theater chain."
    createTheaterChain(input: CreateTheaterChainInput! @spread): TheaterChain! @create

    "Creates a new theater in a theater chain."
    createTheater(input: CreateTheaterInput! @spread): Theater! @create

    "Creates a new auditorium in a theater."
    createAuditorium(input: CreateAuditoriumInput! @spread): Auditorium! @create

    "Creates a new rating for an auditorium."
    createRating(input: CreateRatingInput! @spread): Rating! @guard

    "Submits a contact message."
    contact(
        name: String!,
        phone_number: String!,
        email: String! @rules(apply: ["email"]),
        message: String!,
    ): Boolean!
}

input CreateTheaterInput {
    name: String!
    theaterChain: TheaterChainBelongsTo!
}

input TheaterChainBelongsTo {
    connect: ID
    create: CreateTheaterChainInput
    update: UpdateTheaterChainInput
    upsert: UpsertTheaterChainInput
}

input CreateTheaterChainInput {
    name: String!
}

input UpdateTheaterChainInput {
    name: String!
}

input UpsertTheaterChainInput {
    name: String!
}

input TheaterBelongsTo {
    connect: ID
    create: CreateTheaterInput
    update: UpdateTheaterInput
    upsert: UpsertTheaterInput
}

input UpdateTheaterInput {
    name: String!
}

input UpsertTheaterInput {
    name: String!
}

input AuditoriumBelongsTo {
    connect: ID
    create: CreateAuditoriumInput
    update: UpdateAuditoriumInput
    upsert: UpsertAuditoriumInput
}

input CreateAuditoriumInput {
    name: String!
    theater: TheaterBelongsTo!
}

input UpdateAuditoriumInput {
    name: String
    theater: TheaterBelongsTo
}

input UpsertAuditoriumInput {
    name: String!
    theater: TheaterBelongsTo!
}

input UserBelongsTo {
    connect: ID
}

input CreateRatingInput {
    auditorium_id: Int!
    image_rating: Int @rules(apply: ["nullable", "integer", "min:1", "max:5"])
    audio_rating: Int @rules(apply: ["nullable", "integer", "min:1", "max:5"])
    comfort_rating: Int @rules(apply: ["nullable", "integer", "min:1", "max:5"])
    bomboniere_rating: Int @rules(apply: ["nullable", "integer", "min:1", "max:5"])
    experience_rating: Int @rules(apply: ["nullable", "integer", "min:1", "max:5"])
    review: String
    visited_at: Date! @rules(apply: ["required", "date", "before_or_equal:today"])
    tmdb_movie_id: Int!
    seat: String
    seat_rating: Int
}

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    email: String!
    email_verified_at: DateTime
    ratings: [Rating!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

"State in the country."
type State {
    id: ID!
    name: String!
    uf: String!
    cities: [City!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

"City in a state."
type City {
    id: ID!
    name: String!
    slug: String!
    state: State! @belongsTo
    theaters: [Theater!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

"A theater chain with theaters."
type TheaterChain {
    id: ID!
    name: String!
    slug: String!
    theaters: [Theater!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

"A theater from a chain."
type Theater {
    id: ID!
    name: String!
    slug: String!
    address: String!
    theaterChain: TheaterChain! @belongsTo
    city: City! @belongsTo
    auditoriums (slug: String @eq): [Auditorium!]! @hasMany
    auditoriums_count: Int! @count(relation: "auditoriums")
    created_at: DateTime!
    updated_at: DateTime!
}

"A theater's auditorium room."
type Auditorium {
    id: ID!
    name: String!
    slug: String!
    description: String!
    theater: Theater! @belongsTo
    ratings: [Rating!]! @hasMany @orderBy(column: "visited_at", direction: DESC)
    image_rating: Float @aggregate(relation: "ratings", column: "image_rating", function: AVG)
    image_rating_count: Int! @count(relation: "ratings", scopes: ["hasImageRating"])
    audio_rating: Float @aggregate(relation: "ratings", column: "audio_rating", function: AVG)
    audio_rating_count: Int! @count(relation: "ratings", scopes: ["hasAudioRating"])
    comfort_rating: Float @aggregate(relation: "ratings", column: "comfort_rating", function: AVG)
    comfort_rating_count: Int! @count(relation: "ratings", scopes: ["hasComfortRating"])
    bomboniere_rating: Float @aggregate(relation: "ratings", column: "bomboniere_rating", function: AVG)
    bomboniere_rating_count: Int! @count(relation: "ratings", scopes: ["hasBomboniereRating"])
    experience_rating: Float @aggregate(relation: "ratings", column: "experience_rating", function: AVG)
    experience_rating_count: Int! @count(relation: "ratings", scopes: ["hasExperienceRating"])
    ratings_count: Int! @count(relation: "ratings")
    featured_image: Media
    created_at: DateTime!
    updated_at: DateTime!
}

"A user rating for an auditorium."
type Rating {
    id: ID!
    user: User! @belongsTo
    auditorium: Auditorium! @belongsTo
    image_rating: Int
    audio_rating: Int
    comfort_rating: Int
    bomboniere_rating: Int
    experience_rating: Int
    review: String
    visited_at: Date!
    movie_watched: Movie! @belongsTo(relation: "movieWatched")
    seat: String
    seat_rating: Int
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

"A movie from tmdb."
type Movie {
    id: ID!
    tmdb_id: Int!
    title: String!
    original_title: String!
    overview: String!
    release_date: Date!
    poster_url: String
    tmdb_post_path: String
    created_at: DateTime!
    updated_at: DateTime!
}

type Media {
    original_url: String!
}
